/**
 * Nothing but JSDoc type definitions.
 *
 * @module typedefs
 */


/**
 * Object representing a runnable command and arguments.
 *
 * @typedef {Object} Command
 *
 * @property {String}         command Command to be run.
 * @property {Array.<String>} args    Command arguments.
 */


/**
 * A dependency that can be installed by some package management system.
 *
 * @typedef {Object} Dependency
 *
 * @property {String} name    Dependency name.
 * @property {String} version Dependency version.
 * @property {String} system  Name of the package system used to manage the dependency.
 */


/**
 * Metadata for all resolved direct dependencies.
 *
 * @typedef {Object} DirectDependencyLookup
 *
 * @property {Number}                         count                  Number of direct dependencies.
 * @property {Number}                         nameResolutions        Number of direct name resolutions (non-exact name matches) performed during inference.
 * @property {Array.<Dependency>}             items                  All direct dependencies discovered during inference.
 * @property {Array.<ResourcePackageMapping>} resourcePackageMapping Mapping between resources and resolved package names.
 */


/**
 * V2 environment specification object. An environment specification contains all the information necessary
 * to build a Docker environment.
 *
 * @typedef {Object} Environment
 *
 * @property {String}                        id                               Environment identifier.
 * @property {Object}                        metadata                         Environment metadata object. Contains inference information.
 * @property {String}                        metadata.language                Programming language the application is written in.
 * @property {String}                        metadata.system                  Default package management system.
 * @property {Object}                        metadata.importedResources       Metadata for all imported resources.
 * @property {Number}                        metadata.importedResources.count Number of resources imported by the application.
 * @property {Array.<String>}                metadata.importedResources.items Names of resources imported by the application.
 * @property {DirectDependencyLookup}        metadata.directDependencies      Metadata for all direct dependencies.
 * @property {TransitiveDependencyLookup}    metadata.transitiveDependencies  Metadata for all transitive dependencies.
 * @property {Object}                        metadata.parseResult             Information generated by parsing the target application.
 * @property {Array.<Mutation>}              metadata.mutations               All mutations that have been applied since the initial environment.
 * @property {Array.<EnvironmentValidation>} [metadata.fixedValidations]      Failed environment validation results where the underlying problem was fixed during inference.
 * @property {Object}                        docker                           Docker specific environment options.
 * @property {String}                        docker.imageName                 Name of the Docker environment to use.
 * @property {String}                        docker.imageTag                  Docker image tag to use.
 * @property {Command}                       docker.cmd                       Docker start command.
 * @property {String}                        docker.directory                 Docker directory that will contain application code.
 * @property {Array.<Command>}               setupCommands                    Extra commands to be run before dependencies are installed (ex apt-get update).
 * @property {Array.<Dependency>}            dependencies                     Inferred dependencies in installation order.
 *
 */


/**
 * V2 inference procedure data.
 *
 * @typedef {Object} InferenceResult
 *
 * @property {Object}                      [error]                      Any encountered exception.
 * @property {Environment}                 [environment]                Inferred environment.
 * @property {Object}                      [metadata]                   Global inference metadata.
 * @property {Number}                      [metadata.start]             Start time (unix timestamp).
 * @property {Number}                      [metadata.end]               End time (unix timestamp).
 * @property {Set.<EnvironmentValidation>} [metadata.failedValidations] All unique past failing validation results.
 * @property {Number}                      [metadata.numValidations]    Total number of environments validated.
 * @property {EnvironmentValidation}       [metadata.validation]        Passing validation result.
 * @property {Array.<InstallCommand>}      [installCommands]            RUN commands used to install dependencies in the dockerfile.
 * @property {String}                      [dockerfile]                 Formatted environment dockerfile.
 */


/**
 * System command for installing a dependency.
 *
 * @typedef InstallCommand
 *
 * @property {String}         command Command to execute.
 * @property {Array.<String>} args    Command arguments.
 */


/**
 * Result of applying a mutation operator.
 *
 * @typedef {Object} MutationResult
 *
 * @property {Object}   mutant   Mutated object.
 * @property {Mutation} mutation Mutation applied to object.
 */


/**
 * Object representing the change made in an environment mutation.
 *
 * @typedef {Object} Mutation
 *
 * @property {String} type    The type of mutation performed.
 * @property {Object} changes An object that describes the changes made in the environment mutation.
 */


/**
 * @typedef ResourcePackageMapping
 *
 * @property {String} resource Resource name.
 * @property {String} package  Package name.
 */


/**
 * Metadata for transitive dependency lookup based on direct dependencies.
 *
 * @typedef TransitiveDependencyLookup
 *
 * @property {Number}             count        Number of transitive dependencies discovered during inference.
 * @property {Array.<Dependency>} items        All transitive dependencies.
 * @property {Array.<Dependency>} installOrder All direct and transitive dependencies listed in installation order (reverse topological order).
 */


/**
 * Validation result from evaluating an environment.
 *
 * @typedef EnvironmentValidation
 *
 * @property {String}                 status_code                          Result of overall validation process.
 * @property {String}                 [exception_name]                     Name of any unexpected exception that occurred.
 * @property {String}                 [exception_message]                  Message of any unexpected exception that occurred.
 * @property {String}                 [exception_file_name]                File name of any unexpected exception that occurred.
 * @property {String}                 [exception_line_number]              Line number of any unexpected exception that occurred.
 * @property {Array.<Array.<String>>} [exception_stack]                    Stack trace of any unexpected exception that occurred.
 * @property {Object}                 [execution]                          Metadata about snippet execution.
 * @property {String}                 execution.status_code                Result from executing snippet.
 * @property {String}                 [execution.exception_name]           Name of any exception that occurred while executing the code snippet.
 * @property {String}                 [execution.exception_message]        Message of any exception that occurred while executing the code snippet.
 * @property {String}                 [execution.exception_file_name]      File name of any exception that occurred while executing the code snippet.
 * @property {String}                 [execution.exception_line_number]    Line number of any exception that occurred while executing the code snippet.
 * @property {String}                 [execution.exception_line]           Line that caused the exception.
 * @property {Array.<Array.<String>>} [execution.exception_stack]          Stack trace of any exception that occurred while executing the code snippet.
 * @property {Object}                 [dependencies]                       Metadata about dependency installation.
 * @property {String}                 dependencies.status_code             Result from installing dependencies.
 * @property {Array.<Array.<String>>} [dependencies.install_errors]        [stdout, stderr] pairs from any package installation failure.
 * @property {String}                 [dependencies.exception_name]        Name of any exception that occurred while installing dependencies.
 * @property {String}                 [dependencies.exception_message]     Message of any exception that occurred while installing dependencies.
 * @property {String}                 [dependencies.exception_file_name]   File name of any exception that occurred while installing dependencies.
 * @property {String}                 [dependencies.exception_line_number] Line number of any exception that occurred while installing dependencies.
 * @property {Array.<Array.<String>>} [dependencies.exception_stack]       Stack trace of any exception that occurred while installing dependencies.
 */
